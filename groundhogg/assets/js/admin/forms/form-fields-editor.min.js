(()=>{const{Div,Input,Fragment,Toggle,Label,Button,makeEl,Span,Dashicon}=MakeEl;const{searchOptionsWidget}=Groundhogg.element;const{sprintf,__,_x}=wp.i18n;const FieldSetting=({label:label="",stacked:stacked=false},input)=>Div({className:"space-between"},[Label({for:input.id},label),input]);const FieldSettings=({label,required,updateField})=>Fragment([FieldSetting({label:"Label"},Input({value:label,onInput:e=>updateField({label:e.target.value})})),FieldSetting({label:"Is required?"},Toggle({checked:required,onChange:e=>updateField({required:e.target.checked})}))]);const DisplayField=()=>{};const Field=({id,label,name,required,onUpdate,onDelete,isOpen:isOpen=false,onOpen:onOpen=()=>{}})=>{return Div({id:`field-${id}`,className:`gh-panel outlined ${isOpen?"open":"closed"}`},[Div({className:"gh-panel-header"},[makeEl("h2",{onClick:onOpen,className:"display-flex gap-10 align-center"},[name,isOpen?null:Dashicon("edit")]),Button({className:"gh-button icon secondary text",onClick:onDelete},Dashicon("no-alt"))]),Div({className:"inside display-flex gap-10 column"},[FieldSettings({label:label,required:required,updateField:onUpdate})])])};const FormFieldsEditor=({form:form=[],fields:fields=[],fieldGroups:fieldGroups={},onChange:onChange=([form,map])=>{}})=>{let currField="";const openField=id=>{currField=id;morph()};const morph=()=>morphdom(document.getElementById("form-fields-editor"),render());const handleOnChange=()=>{const map={};form.forEach(({mapFrom,mapTo,id:id=""})=>{map[mapFrom??id]=mapTo??id});onChange([form,map])};const updateField=(id,newSettings)=>{form=form.map(field=>field.id===id?{...field,...newSettings}:field);handleOnChange();morph()};const addField=settings=>{form.push(settings);handleOnChange();morph()};const deleteField=id=>{form=form.filter(field=>field.id!==id);handleOnChange();morph()};const render=()=>{return Div({id:"form-fields-editor"},[Div({className:"display-flex column"},form.map(field=>Field({...field,isOpen:field.id===currField,onUpdate:settings=>updateField(field.id,settings),onDelete:()=>deleteField(field.id),onOpen:()=>openField(field.id)}))),Button({id:`add-form-field`,className:"gh-button secondary",style:{marginTop:"20px"},onClick:e=>{let options=fields.filter(field=>!form.some(f=>f.id===field.id));let groups=fieldGroups;searchOptionsWidget({position:"fixed",target:e.currentTarget,options:options,groups:groups,onSelect:({group,...field})=>{addField({...field,label:field.name})},filterOption:(option,search)=>{return option.name.match(new RegExp(search,"i"))},renderOption:option=>option.name,noOptions:__("No matching fields...","groundhogg")}).mount()}},[Dashicon("plus-alt2"),Span({},__("Add field","groundhogg"))])])};return render()};const ContactFormFieldsEditor=({form,onChange:onChange=form=>{}})=>{const{tabs:customTabs,fields:customFields,groups:customGroups}=Groundhogg.filters.gh_contact_custom_properties;const fieldGroups={contact:__("Contact Info"),address:__("Address"),compliance:__("Compliance"),special:__("Special")};Object.values(customTabs).forEach(tab=>{let groups=Object.values(customGroups).filter(group=>group.tab===tab.id);groups.forEach(group=>{fieldGroups[group.id]=sprintf("%s: %s",tab.name,group.name)})});const fields=[{id:"first_name",name:"First Name",group:"contact",required:true},{id:"last_name",name:"Last Name",group:"contact",required:true},{id:"full_name",name:"Full Name",group:"contact",required:true},{id:"email",name:"Email Address",group:"contact",required:true},{id:"primary_phone",name:"Phone",group:"contact",required:false},{id:"mobile_phone",name:"Mobile Phone",group:"contact",required:false},{id:"birthday",name:"Birthday",group:"contact",required:false},{id:"street_address_1",name:"Line 1",group:"address",required:false},{id:"street_address_2",name:"Line 2",group:"address",required:false},{id:"city",name:"City",group:"address",required:false},{id:"region",name:"State",group:"address",required:false},{id:"postal_zip",name:"Zip Code",group:"address",required:false},{id:"country",name:"Country",group:"address",required:false},...Object.values(customFields).map(({id,label,group,name})=>({id:id,name:label,group:group,required:false,mapFrom:name,mapTo:id}))];return FormFieldsEditor({fields:fields,fieldGroups:fieldGroups,form:form,onChange:onChange})};Groundhogg.fields={FormFieldsEditor:FormFieldsEditor,ContactFormFieldsEditor:ContactFormFieldsEditor}})();